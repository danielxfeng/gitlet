package gitlet;

import java.io.File;
import java.util.TreeMap;

import static gitlet.Utils.*;

/**
 * This class manages the branches.
 * The Field branches is a TreeMap of the branches.
 * Key: name of the branch; Value: the Hash Value of current commit of this branch.
 * The Field currBranch is the name of the current branch.
 * All setting methods will automatically serialise the Fields and save to disk.
 */
public class Branches {


    /** The file that saves the Serialised Field: Branches. */
    public static final File BRANCHES_FILE = join(Repository.OBJ_DIR, "branches");

    /** The file that saves the Serialised Field: Current Branch. */
    public static final File CURR_BRANCH_FILE = join(Repository.OBJ_DIR, "current_branch");

    /** The default branch. */
    public static final String DEFAULT_BRANCH = "master";

    /**
     * A TreeMap of Branches.
     * Key: name of the branch; Value: the Hash Value of current commit of this branch.
     */
    private TreeMap<String, String> branches;

    /** The name of the current branch. */
    private String currBranch;

    /** The Filed branches, currBranch are generated by de-serialising from a disk file,
     * or generate a new one if not exist.
     */
    public Branches() {
        try {
            this.branches = (TreeMap<String, String>) readObject(BRANCHES_FILE, TreeMap.class);
            this.currBranch = readObject(CURR_BRANCH_FILE, String.class);
        } catch (IllegalArgumentException e) {
            this.branches = new TreeMap<>();
            this.branches.put(DEFAULT_BRANCH, Commit.INIT_HASH);
            this.currBranch = DEFAULT_BRANCH;
            saveBranches();
            saveCurrentBranches();
        }
    }

    /** Return the Hash Code of the current Commit of current Branch as well as HEAD. */
    public String getHead() {
        if (!branches.containsKey(currBranch)) {
            throw error("The HEAD point error!");
        }
        return branches.get(currBranch);
    }

    /** Get the current branch name */
    public String getCurrBranch() {
        return currBranch;
    }

    /** Get the current commit with the branch name */
    public String getBranchPoint(String branchName) {
        if (!branches.containsKey(branchName)) {
            return null;
        }
        return branches.get(branchName);
    }

    /** Get all branch names, may return null. */
    public String[] getBranches() {
        return branches.keySet().toArray(new String[0]);
    }

    /** Return if a branch name is in branches. */
    public boolean hasBranch(String branchName) {
        return branches.containsKey(branchName);
    }

    /** Update the Hash Code of the current Commit of current Branch as well as HEAD.
     *  Serialise the Field branches and save it to disk.
     */
    public void setCurrentHead(String newHashCode) {
        branches.put(currBranch, newHashCode);
        saveBranches();
    }

    /** Update branches, and auto serialise the branches and save it to the disk. */
    public void setBranches(String branchName, String hashCode) {
        branches.put(branchName, hashCode);
        saveBranches();
    }

    /** Update the currBranch, and auto serialise and save it to the disk. */
    public void setCurrBranch(String branchName) {
        currBranch = branchName;
        saveCurrentBranches();
    }

    /** Rm a branch, auto serialise the Filed branches and save to disk. */
    public void removeBranch(String branchName) {
        branches.remove(branchName);
        saveBranches();
    }

    /** Serialise the Field branches and write to disk. */
    public void saveBranches() {
        writeObject(BRANCHES_FILE, branches);
    }

    /** Serialise the Field currBranch and write to disk. */
    public void saveCurrentBranches() {
        writeObject(CURR_BRANCH_FILE, currBranch);
    }
}
