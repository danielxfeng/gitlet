package gitlet;

import java.io.File;
import java.util.TreeMap;
import java.util.TreeSet;

import static gitlet.Utils.*;

/** This class represents a gitlet stage.
 *  There are 1 TreeMap and 1 TreeSet in the stage.
 *  1. stage: tracks the file that had been ADD-ed, but has not been COMMIT-ed.
 *  2. removed:  tracks the file that had been ADD-ed, but removed now.
 *      Key: file name; Value: Hash Code of the file.
 */
public class Stage {

    /** The file that saves the Serialised Field: stage. */
    public static final File STAGE_FILE = join(Repository.OBJ_DIR, "stage");

    /** The file that saves the Serialised Field: removed. */
    public static final File REMOVED_STAGE_FILE = join(Repository.OBJ_DIR, "removed_stage");

    /** A TreeMap tracks the file that had been ADD-ed, but has not been COMMIT-ed. */
    private TreeMap<String, String> stage;

    /** A TreeMap tracks the file that had been ADD-ed, but removed now. */
    private TreeSet<String> removed;

    /** The Filed stage and removed is generated by de-serialising from a disk file,
     * or generate a new one if not exist.
     */
    public Stage() {
        try {
            this.stage = (TreeMap<String, String>) readObject(STAGE_FILE, TreeMap.class);
        } catch (IllegalArgumentException e) {
            this.stage = new TreeMap<>();
        }
        try {
            this.removed = (TreeSet<String>) readObject(REMOVED_STAGE_FILE, TreeSet.class);
        } catch (IllegalArgumentException e) {
            this.removed = new TreeSet<>();
        }
    }

    /** Clear the current stage, and serialise the Fields stage && removed and save it to disk. */
    public void initStage() {
        this.stage = new TreeMap<>();
        this.removed = new TreeSet<>();
        saveStage();
        saveRemovedStage();
    }

    /** Return file names that are tracked by the stage, may return null if it is empty. */
    public String[] getFilesFromStage() {
        if (stage.isEmpty()) {
            return null;
        }
        return stage.keySet().toArray(new String[0]);
    }

    /** Return file names that are in the removed stage, may return null if it is empty. */
    public String[] getFilesFromRemovedStage() {
        if (removed.isEmpty()) {
            return null;
        }
        return removed.toArray(new String[0]);
    }

    /** Return Hash Code of a file in the stage. */
    public String getHashForFileInStage(String fileName) {
        return stage.get(fileName);
    }

    /** Return if a file is in the stage. */
    public boolean stageHas(String fileName) {
        return stage.containsKey(fileName);
    }

    /** Return if a file is in the removed stage. */
    public boolean removedStageHas(String fileName) {
        return removed.contains(fileName);
    }

    /** Return the removed stage
     *  SHOULD Call saveStage() to serialise the Field stage and save to file.
     */
    public void setStage(String fileName, String hashCode) {
        this.stage.put(fileName, hashCode);
    }

    /** Add file name to removed stage, auto serialise the Field removed and save it to disk. */
    public void setRemovedStage(String fileName) {
        this.removed.add(fileName);
        saveRemovedStage();
    }

    /** Remove a file from the stage, return the Hash Code of the file.
     *  Auto serialise the Field stage and save it to disk.
     */
    public String removeFromStage(String fileName) {
        String value = this.stage.remove(fileName);
        saveStage();
        return value;
    }

    /** Remove a file from the removed stage.
     *  Auto serialise the Field stage and save it to disk.
     */
    public void removeFromRemovedStage(String fileName) {
        this.removed.remove(fileName);
        saveRemovedStage();
    }

    /** Serialise current stage and save to disk */
    public void saveStage() {
        writeObject(STAGE_FILE, this.stage);
    }

    /** Serialise removed stage and save to disk */
    public void saveRemovedStage() {
        writeObject(REMOVED_STAGE_FILE, this.removed);
    }
}
