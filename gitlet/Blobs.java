package gitlet;

import java.io.File;
import java.util.TreeSet;

import static gitlet.Utils.*;
import static gitlet.Utils.readObject;

/**
 * This class manages the blob files.
 * The Field BLOBS is a TreeSet of the Hash Code of the files.
 * Every file has several copies if there are different versions.
 * Every copy will be saved under the BLOB_DIR with the name of its Hash Code.
 */
public class Blobs {

    /** The directory that saves the blob files. */
    public static final File BLOB_DIR = join(Repository.GITLET_DIR, "blob");

    /** The file that saves the Serialised Field: Blobs. */
    public static final File BLOBS_FILE = join(Repository.OBJ_DIR, "blobs");

    /**
     * A Set of Blob Files. A file with different versions has different copies.
     * The Set saves the hash codes of the copies.
     * Key: hash value of the file; Value: the file name.
     */
    private TreeSet<String> blobs;

    /** The Filed BLOBS is generated by de-serialising from a disk file,
     * or generate a new one if not exist.
     */
    public Blobs() {
        try {
            this.blobs = (TreeSet<String>) readObject(BLOBS_FILE, TreeSet.class);
        } catch (IllegalArgumentException e) {
            this.blobs = new TreeSet<>();
            BLOB_DIR.mkdir();
        }
    }

    /** Return the byte[] of a file from disk by its Hash Code. */
    public byte[] getBlob(String hashCode) {
        if (!blobs.contains(hashCode)) {
            throw error("The blob file is NOT exist, check the hashCode first!");
        }

        return readContents(join(BLOB_DIR, hashCode));
    }

    /** Return the String of a file from disk by its Hash Code. */
    private String getBlobAsString(String hashCode) {
        if (!blobs.contains(hashCode)) {
            throw error("The blob file is NOT exist, check the hashCode first!");
        }

        return readContentsAsString(join(BLOB_DIR, hashCode));
    }

    /**
     * Add the blob file to disk if not exist.
     * 1. Save the blob file to disk.
     * 2. The blob file name is Hash Code.
     * 3. Add the Hash Code to Field blobs.
     * BUT SHOULD Call saveBlobs() to save the Field blob to disk.
     *
     * @param hashCode: the Hash Code of the file.
     * @param fileContent: the file content of the file.
     *
     * @return true if there is the new version of blob files.
     */
    public boolean addBlob(String hashCode, byte[] fileContent) {
        if (blobs.contains(hashCode)) {
            return false;
        }

        writeContents(join(BLOB_DIR, hashCode), (Object) fileContent);
        blobs.add(hashCode);
        return true;
    }

    /** Delete a blob file and serialise the Field blobs and save to disk. */
    public void removeBlob(String hashCode) {
        File file = join(BLOB_DIR, hashCode);
        if (file.exists()) {
            file.delete();
        }
        this.blobs.remove(hashCode);
        saveBlobs();
    }

    /** Merge 2 conflict blob files and save to word dir. */
    public void mergeBlobs(String fileName, String headVer, String givenVer) {
        System.out.println("Encountered a merge conflict.");
        String newContent = "<<<<<<< HEAD\n" + getBlobAsString(headVer)
                + "=======\n" + getBlobAsString(givenVer) + ">>>>>>>\n";
        writeContents(join(Repository.CWD, fileName), newContent);
    }

    /** Merge 1 conflict blob file ONLY in HEAD and save to word dir. */
    public void mergeSingleBlob(String fileName, String ver) {
        System.out.println("Encountered a merge conflict.");
        String newContent = "<<<<<<< HEAD\n" + getBlobAsString(ver) + "=======\n>>>>>>>\n";
        writeContents(join(Repository.CWD, fileName), newContent);
    }

    /** Save the blob file to work dir. */
    public void saveBlob(File file, byte[] content) {
        writeContents(file, (Object) content);
    }

    /** Serialise the Field blobs and write to disk. */
    public void saveBlobs() {
        writeObject(BLOBS_FILE, blobs);
    }
}
